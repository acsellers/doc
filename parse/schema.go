package parse

import (
	"bytes"
	"fmt"
	"io"
	"text/template"

	"code.google.com/p/go.tools/imports"
)

var schemaTemplate = `/*
  This code was generated by the Doc ORM Generator and isn't meant to be edited.
	If at all possible, please regenerate this file from your gp files instead of
	attempting to edit it to add changes.
*/

package {{ .Name }}

import "github.com/acsellers/doc/schema"

var Schema = schema.Schema{
	Tables: map[string]*schema.Table{
		{{ range $table := .Tables }}
			"{{ .Name }}": &schema.Table{
				Name: "{{ .Name }}",
				Columns: []schema.Column{
					{{ range $column := .Columns }}
						{{ if $column.SimpleType }}
							schema.Column{
								Name: "{{ $column.Name }}",
								Type: "{{ $column.Type }}",
								Length: {{ $column.Length }},
							},
						{{ end }}
					{{ end }}
				},
			},
		{{ end }}
	},
}

func init() {
	{{ range $table := .Tables }}
		Schema["{{ .Name }}"].HasMany = []schema.ManyRelationship{
			{{ range $column := $table.Columns }}
				{{ if $column.IsHasMany }}
					schema.ManyRelationship{
						Schema["{{ $table.Name }}"],
						Schema["{{ $column.GoType }}"],
						Schema["{{ $column.GoType }}"].FindColumn("{{ $column.ChildColumn }}"),
					},
				{{ end }}
			{{ end }}
		}
	{{ end }}

	{{ range $table := .Tables }}
		Schema["{{ .Name }}"].ChildOf = []schema.ManyRelationship{
			{{ range $column := $table.Columns }}
				{{ if $column.IsChildHasMany }}
					schema.ManyRelationship{
						Schema["{{ $column.ParentCol.Tbl.Name }}"],
						Schema["{{ $column.ParentCol.GoType }}"],
						Schema["{{ $column.ParentCol.Tbl.Name }}"].FindColumn("{{ $column.Name }}"),
					},
				{{ end }}
			{{ end }}
		}
	{{ end }}

	{{ range $table := .Tables }}
		Schema["{{ .Name }}"].HasOne = []schema.OneRelationship{
			{{ range $column := $table.Columns }}
				{{ if $column.IsHasOne }}
					schema.OneRelationship{
						Schema["{{ $table.Name }}"],
						Schema["{{ $column.GoType }}"],
						Schema["{{ $column.GoType }}"].FindColumn("{{ $column.ChildColumn }}"),
					},
				{{ end }}
			{{ end }}
		}
	{{ end }}

	{{ range $table := .Tables }}
		Schema["{{ .Name }}"].BelongsTo = []schema.OneRelationship{
			{{ range $column := $table.Columns }}
				{{ if $column.IsBelongsTo }}
					schema.OneRelationship{
						Schema["{{ $column.ParentCol.Tbl.Name }}"],
						Schema["{{ $column.ParentCol.GoType }}"],
						Schema["{{ $column.ParentCol.Tbl.Name }}"].FindColumn("{{ $column.Name }}"),
					},
				{{ end }}
			{{ end }}
		}
	{{ end }}


}
`

var sTmpl *template.Template

func init() {
	var err error
	sTmpl, err = template.New("schema").Parse(schemaTemplate)
	if err != nil {
		panic(err)
	}
}

func (pkg *Package) WriteSchemaFile(w io.Writer) {
	b := &bytes.Buffer{}
	err := sTmpl.Execute(b, pkg)
	if err != nil {
		panic(err)
	}
	ib, err := imports.Process(pkg.ActiveFiles[0].AST.Name.Name+"_gen.go", b.Bytes(), nil)
	if err != nil {
		fmt.Println("Error in Gen File:", err)
		w.Write(b.Bytes())
		return
	}
	w.Write(ib)
}
